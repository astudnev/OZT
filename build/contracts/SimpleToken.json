{
  "contractName": "SimpleToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "INITIAL_SUPPLY",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "balance",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "name": "success",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    }
  ],
  "bytecode": "0x606060405260408051908101604052600b81527f53696d706c65546f6b656e0000000000000000000000000000000000000000006020820152600390805161004b9291602001906100cd565b5060408051908101604052600381527f53494d0000000000000000000000000000000000000000000000000000000000602082015260049080516100939291602001906100cd565b50601260055561271060065534156100aa57600080fd5b6006546000818155600160a060020a033316815260016020526040902055610168565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010e57805160ff191683800117855561013b565b8280016001018555821561013b579182015b8281111561013b578251825591602001919060010190610120565b5061014792915061014b565b5090565b61016591905b808211156101475760008155600101610151565b90565b6108a7806101776000396000f3006060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a35780632ff2e9dc146101cb578063313ce567146101de57806366188463146101f157806370a082311461021357806395d89b4114610232578063a9059cbb14610245578063d73dd62314610267578063dd62ed3e14610289575b600080fd5b34156100c957600080fd5b6100d16102ae565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a036004351660243561034c565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103f2565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a03600435811690602435166044356103f8565b34156101d657600080fd5b610191610522565b34156101e957600080fd5b610191610528565b34156101fc57600080fd5b61016a600160a060020a036004351660243561052e565b341561021e57600080fd5b610191600160a060020a0360043516610628565b341561023d57600080fd5b6100d1610643565b341561025057600080fd5b61016a600160a060020a03600435166024356106ae565b341561027257600080fd5b61016a600160a060020a0360043516602435610784565b341561029457600080fd5b610191600160a060020a0360043581169060243516610828565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b505050505081565b600081158061037e5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561038957600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600080600160a060020a038416151561041057600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610456908463ffffffff61085316565b600160a060020a03808716600090815260016020526040808220939093559086168152205461048b908463ffffffff61086516565b600160a060020a0385166000908152600160205260409020556104b4818463ffffffff61085316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065481565b60055481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561058b57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105c2565b61059b818463ffffffff61085316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103445780601f1061031957610100808354040283529160200191610344565b6000600160a060020a03831615156106c557600080fd5b600160a060020a0333166000908152600160205260409020546106ee908363ffffffff61085316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610723908363ffffffff61086516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546107bc908363ffffffff61086516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561085f57fe5b50900390565b60008282018381101561087457fe5b93925050505600a165627a7a723058208926045f048466bf0d69d2e705bc7111bd688af6aba033b47d7af87fb9a564ec0029",
  "deployedBytecode": "0x6060604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461017e57806323b872dd146101a35780632ff2e9dc146101cb578063313ce567146101de57806366188463146101f157806370a082311461021357806395d89b4114610232578063a9059cbb14610245578063d73dd62314610267578063dd62ed3e14610289575b600080fd5b34156100c957600080fd5b6100d16102ae565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010d5780820151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015357600080fd5b61016a600160a060020a036004351660243561034c565b604051901515815260200160405180910390f35b341561018957600080fd5b6101916103f2565b60405190815260200160405180910390f35b34156101ae57600080fd5b61016a600160a060020a03600435811690602435166044356103f8565b34156101d657600080fd5b610191610522565b34156101e957600080fd5b610191610528565b34156101fc57600080fd5b61016a600160a060020a036004351660243561052e565b341561021e57600080fd5b610191600160a060020a0360043516610628565b341561023d57600080fd5b6100d1610643565b341561025057600080fd5b61016a600160a060020a03600435166024356106ae565b341561027257600080fd5b61016a600160a060020a0360043516602435610784565b341561029457600080fd5b610191600160a060020a0360043581169060243516610828565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103445780601f1061031957610100808354040283529160200191610344565b820191906000526020600020905b81548152906001019060200180831161032757829003601f168201915b505050505081565b600081158061037e5750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561038957600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600080600160a060020a038416151561041057600080fd5b50600160a060020a03808516600081815260026020908152604080832033909516835293815283822054928252600190529190912054610456908463ffffffff61085316565b600160a060020a03808716600090815260016020526040808220939093559086168152205461048b908463ffffffff61086516565b600160a060020a0385166000908152600160205260409020556104b4818463ffffffff61085316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b60065481565b60055481565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561058b57600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105c2565b61059b818463ffffffff61085316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b600160a060020a031660009081526001602052604090205490565b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103445780601f1061031957610100808354040283529160200191610344565b6000600160a060020a03831615156106c557600080fd5b600160a060020a0333166000908152600160205260409020546106ee908363ffffffff61085316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610723908363ffffffff61086516565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546107bc908363ffffffff61086516565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561085f57fe5b50900390565b60008282018381101561087457fe5b93925050505600a165627a7a723058208926045f048466bf0d69d2e705bc7111bd688af6aba033b47d7af87fb9a564ec0029",
  "sourceMap": "298:375:7:-;;;341:34;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;379:28;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;437:2;411:28;;475:5;443:37;;565:105;;;;;;;;608:14;;594:11;:28;;;-1:-1:-1;;;;;637:10:7;628:20;;;:8;:20;;;;;:37;298:375;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;298:375:7;;;-1:-1:-1;298:375:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "298:375:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;341:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;341:34:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1482:534:8;;;;;;;;;;-1:-1:-1;;;;;1482:534:8;;;;;;;;;;;;;;;;;;;;;;;;179:26:2;;;;;;;;;;;;;;;;;;;;;;;;;;;728:522:8;;;;;;;;;;-1:-1:-1;;;;;728:522:8;;;;;;;;;;;;443:37:7;;;;;;;;;;;;411:28;;;;;;;;;;;;2975:404:8;;;;;;;;;;-1:-1:-1;;;;;2975:404:8;;;;;;;960:104:0;;;;;;;;;;-1:-1:-1;;;;;960:104:0;;;;;379:28:7;;;;;;;;;;;;431:327:0;;;;;;;;;;-1:-1:-1;;;;;431:327:0;;;;;;;2708:263:8;;;;;;;;;;-1:-1:-1;;;;;2708:263:8;;;;;;;2335:133;;;;;;;;;;-1:-1:-1;;;;;2335:133:8;;;;;;;;;;341:34:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1482:534:8:-;1542:4;1852:11;;;1851:53;;-1:-1:-1;;;;;;1877:10:8;1869:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;:34;1851:53;1843:62;;;;;;;;-1:-1:-1;;;;;1920:10:8;1912:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;;;:38;;;1956;;1944:6;;1956:38;;;;;;;;;;;;;-1:-1:-1;2007:4:8;1482:534;;;;:::o;179:26:2:-;;;;:::o;728:522:8:-;803:4;;-1:-1:-1;;;;;823:17:8;;;;815:26;;;;;;-1:-1:-1;;;;;;865:14:8;;;;;;;:7;:14;;;;;;;;880:10;865:26;;;;;;;;;;;;1063:15;;;:8;:15;;;;;;;:27;;1083:6;1063:27;:19;:27;:::i;:::-;-1:-1:-1;;;;;1045:15:8;;;;;;;:8;:15;;;;;;:45;;;;1112:13;;;;;;;:25;;1130:6;1112:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;1096:13:8;;;;;;:8;:13;;;;;:41;1172:22;:10;1187:6;1172:22;:14;:22;:::i;:::-;-1:-1:-1;;;;;1143:14:8;;;;;;;:7;:14;;;;;;;;1158:10;1143:26;;;;;;;;;;;:51;;;;1200:28;;;;;;1221:6;;1200:28;;;;;;;;;;;;;-1:-1:-1;1241:4:8;;728:522;-1:-1:-1;;;;728:522:8:o;443:37:7:-;;;;:::o;411:28::-;;;;:::o;2975:404:8:-;-1:-1:-1;;;;;3100:10:8;3092:19;;3056:12;3092:19;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;3131:27;;;3127:164;;;-1:-1:-1;;;;;3176:10:8;3168:19;;3200:1;3168:19;;;:7;:19;;;;;;;;:29;;;;;;;;;;;:33;3127:164;;;3254:30;:8;3267:16;3254:30;:12;:30;:::i;:::-;-1:-1:-1;;;;;3230:10:8;3222:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;:62;3127:164;-1:-1:-1;;;;;3305:10:8;3296:61;;3327:19;;;;:7;:19;;;;;;;;3296:61;;;3327:29;;;;;;;;;;;;3296:61;;;;;;;;;;;;;;;-1:-1:-1;3370:4:8;;2975:404;-1:-1:-1;;;2975:404:8:o;960:104:0:-;-1:-1:-1;;;;;1043:16:0;1013:15;1043:16;;;:8;:16;;;;;;;960:104::o;379:28:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;431:327:0;487:4;-1:-1:-1;;;;;507:17:0;;;;499:26;;;;;;-1:-1:-1;;;;;627:10:0;618:20;;;;;:8;:20;;;;;;:32;;643:6;618:32;:24;:32;:::i;:::-;-1:-1:-1;;;;;604:10:0;595:20;;;;;;:8;:20;;;;;;:55;;;;672:13;;;;;;;:25;;690:6;672:25;:17;:25;:::i;:::-;-1:-1:-1;;;;;656:13:0;;;;;;;:8;:13;;;;;;;:41;;;;:13;712:10;703:33;;;;;;729:6;;703:33;;;;;;;;;;;;;-1:-1:-1;749:4:0;431:327;;;;:::o;2708:263:8:-;-1:-1:-1;;;;;2844:10:8;2836:19;;2784:12;2836:19;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;:46;;2870:11;2836:46;:33;:46;:::i;:::-;-1:-1:-1;;;;;2812:10:8;2804:19;;;;;;:7;:19;;;;;;;;:29;;;;;;;;;;;;;;:78;;;:29;;:19;;2888:61;;2804:78;2888:61;;;;;;;;;;;;;-1:-1:-1;2962:4:8;2708:263;;;;:::o;2335:133::-;-1:-1:-1;;;;;2438:15:8;;;2406:17;2438:15;;;:7;:15;;;;;;;;:25;;;;;;;;;;;;;2335:133::o;544:105:6:-;597:7;619:6;;;;612:14;;;;-1:-1:-1;639:5:6;;;544:105::o;653:124::-;706:7;733:5;;;751:6;;;;744:14;;;;771:1;653:124;-1:-1:-1;;;653:124:6:o",
  "source": "pragma solidity ^0.4.11;\n\n\nimport \"./StandardToken.sol\";\n\n\n/**\n * @title SimpleToken\n * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n * Note they can later distribute these tokens as they wish using `transfer` and other\n * `StandardToken` functions.\n */\ncontract SimpleToken is StandardToken {\n\n  string public name = \"SimpleToken\";\n  string public symbol = \"SIM\";\n  uint256 public decimals = 18;\n  uint256 public INITIAL_SUPPLY = 10000;\n\n  /**\n   * @dev Contructor that gives msg.sender all of existing tokens. \n   */\n  function SimpleToken() {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n}\n",
  "sourcePath": "/Users/studnev/audit/OZT-studnev/contracts/SimpleToken.sol",
  "ast": {
    "absolutePath": "/Users/studnev/audit/OZT-studnev/contracts/SimpleToken.sol",
    "exportedSymbols": {
      "SimpleToken": [
        1002
      ]
    },
    "id": 1003,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 971,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:7"
      },
      {
        "absolutePath": "/Users/studnev/audit/OZT-studnev/contracts/StandardToken.sol",
        "file": "./StandardToken.sol",
        "id": 972,
        "nodeType": "ImportDirective",
        "scope": 1003,
        "sourceUnit": 1250,
        "src": "27:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [],
            "baseName": {
              "contractScope": null,
              "id": 973,
              "name": "StandardToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1249,
              "src": "322:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StandardToken_$1249",
                "typeString": "contract StandardToken"
              }
            },
            "id": 974,
            "nodeType": "InheritanceSpecifier",
            "src": "322:13:7"
          }
        ],
        "contractDependencies": [
          76,
          119,
          148,
          1249
        ],
        "contractKind": "contract",
        "documentation": "@title SimpleToken\n@dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \nNote they can later distribute these tokens as they wish using `transfer` and other\n`StandardToken` functions.",
        "fullyImplemented": true,
        "id": 1002,
        "linearizedBaseContracts": [
          1002,
          1249,
          76,
          119,
          148
        ],
        "name": "SimpleToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 977,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "341:34:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            },
            "typeName": {
              "id": 975,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "341:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string storage pointer"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53696d706c65546f6b656e",
              "id": 976,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "362:13:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_da035752f00a45fb4b10b269b9dcdc58efd98a12eda6b33da179acab837f7818",
                "typeString": "literal_string \"SimpleToken\""
              },
              "value": "SimpleToken"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 980,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "379:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            },
            "typeName": {
              "id": 978,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "379:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string storage pointer"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53494d",
              "id": 979,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "402:5:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_f6fc0e115f393f52de8a1783205484e2c47c0ae0af6904170edd370a74c376e8",
                "typeString": "literal_string \"SIM\""
              },
              "value": "SIM"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 983,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "411:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 981,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "411:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 982,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "437:2:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 986,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "443:37:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 984,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "443:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3130303030",
              "id": 985,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "475:5:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1000,
              "nodeType": "Block",
              "src": "588:82:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 989,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 123,
                      "src": "594:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 990,
                      "name": "INITIAL_SUPPLY",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 986,
                      "src": "608:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "594:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 992,
                  "nodeType": "ExpressionStatement",
                  "src": "594:28:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 998,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 993,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "628:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 996,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 994,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1262,
                          "src": "637:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 995,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "637:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "628:20:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 997,
                      "name": "INITIAL_SUPPLY",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 986,
                      "src": "651:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "628:37:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 999,
                  "nodeType": "ExpressionStatement",
                  "src": "628:37:7"
                }
              ]
            },
            "documentation": "@dev Contructor that gives msg.sender all of existing tokens. ",
            "id": 1001,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "SimpleToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "585:2:7"
            },
            "payable": false,
            "returnParameters": {
              "id": 988,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "588:0:7"
            },
            "scope": 1002,
            "src": "565:105:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1003,
        "src": "298:375:7"
      }
    ],
    "src": "0:674:7"
  },
  "legacyAST": {
    "absolutePath": "/Users/studnev/audit/OZT-studnev/contracts/SimpleToken.sol",
    "exportedSymbols": {
      "SimpleToken": [
        1002
      ]
    },
    "id": 1003,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 971,
        "literals": [
          "solidity",
          "^",
          "0.4",
          ".11"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:7"
      },
      {
        "absolutePath": "/Users/studnev/audit/OZT-studnev/contracts/StandardToken.sol",
        "file": "./StandardToken.sol",
        "id": 972,
        "nodeType": "ImportDirective",
        "scope": 1003,
        "sourceUnit": 1250,
        "src": "27:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": [],
            "baseName": {
              "contractScope": null,
              "id": 973,
              "name": "StandardToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1249,
              "src": "322:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StandardToken_$1249",
                "typeString": "contract StandardToken"
              }
            },
            "id": 974,
            "nodeType": "InheritanceSpecifier",
            "src": "322:13:7"
          }
        ],
        "contractDependencies": [
          76,
          119,
          148,
          1249
        ],
        "contractKind": "contract",
        "documentation": "@title SimpleToken\n@dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \nNote they can later distribute these tokens as they wish using `transfer` and other\n`StandardToken` functions.",
        "fullyImplemented": true,
        "id": 1002,
        "linearizedBaseContracts": [
          1002,
          1249,
          76,
          119,
          148
        ],
        "name": "SimpleToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 977,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "341:34:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            },
            "typeName": {
              "id": 975,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "341:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string storage pointer"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53696d706c65546f6b656e",
              "id": 976,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "362:13:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_da035752f00a45fb4b10b269b9dcdc58efd98a12eda6b33da179acab837f7818",
                "typeString": "literal_string \"SimpleToken\""
              },
              "value": "SimpleToken"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 980,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "379:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            },
            "typeName": {
              "id": 978,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "379:6:7",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string storage pointer"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "53494d",
              "id": 979,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "402:5:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_f6fc0e115f393f52de8a1783205484e2c47c0ae0af6904170edd370a74c376e8",
                "typeString": "literal_string \"SIM\""
              },
              "value": "SIM"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 983,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "411:28:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 981,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "411:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3138",
              "id": 982,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "437:2:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_18_by_1",
                "typeString": "int_const 18"
              },
              "value": "18"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 986,
            "name": "INITIAL_SUPPLY",
            "nodeType": "VariableDeclaration",
            "scope": 1002,
            "src": "443:37:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 984,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "443:7:7",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "argumentTypes": null,
              "hexValue": "3130303030",
              "id": 985,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "475:5:7",
              "subdenomination": null,
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1000,
              "nodeType": "Block",
              "src": "588:82:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 989,
                      "name": "totalSupply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 123,
                      "src": "594:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 990,
                      "name": "INITIAL_SUPPLY",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 986,
                      "src": "608:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "594:28:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 992,
                  "nodeType": "ExpressionStatement",
                  "src": "594:28:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 998,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 993,
                        "name": "balances",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12,
                        "src": "628:8:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 996,
                      "indexExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 994,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1262,
                          "src": "637:3:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 995,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "637:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "628:20:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 997,
                      "name": "INITIAL_SUPPLY",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 986,
                      "src": "651:14:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "628:37:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 999,
                  "nodeType": "ExpressionStatement",
                  "src": "628:37:7"
                }
              ]
            },
            "documentation": "@dev Contructor that gives msg.sender all of existing tokens. ",
            "id": 1001,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "SimpleToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "585:2:7"
            },
            "payable": false,
            "returnParameters": {
              "id": 988,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "588:0:7"
            },
            "scope": 1002,
            "src": "565:105:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1003,
        "src": "298:375:7"
      }
    ],
    "src": "0:674:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.21+commit.dfe3193c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.0",
  "updatedAt": "2018-05-16T13:30:58.465Z"
}